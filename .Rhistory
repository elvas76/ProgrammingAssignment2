library(KernSmooth)
q()
licence()
swirl()
library(swirl)
swirl()
bye()
q()
library(swirl)
swirl()
seq(1,20)
seq(1,20,0.5)
seq(1,20,by=0.5)
seq(1,10,by=0.5)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,40)
rep(0,times=40)
rep(c(0,1,2),10)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect = c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"Andre")
my_name
paste(my_name,collapse = TRUE)
paste(my_name,collapse = " ")
paste("Hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
bye()
q()
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x*3
q()
library(swirl)
swirl()
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(X)]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- names(vect)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20,nrow=4,ncol=5)
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
bye()
q()
make.power <- function(n) {
function(x) {
x^n
}
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
search()
environment(cube)
ls(environment(cube))
get(n,environment(cube))
get("n",environment(cube))
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
fixo <- c(FALSE,FALSE)
fixo
parametros <- fixo
parametros[!fixo]
!fixo
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
set.seed(1)
normals <- rnorm(100,1,2)
normals
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
get(data,environment(nLL))
get("data",environment(nLL))
optim(c(mu=0,sigma=1),nLL)$par
x <- as.Date("1976-05-07")
x
class(x)
unclass(x)
weekdays(x)
months(x)
quarters(x)
agora <- Sys.time()
agora
p <- as.POSIXlt(x)
p
p <- as.POSIXlt(agora)
p
names(unclass(p))
class(p)
p$sec
class(agora)
unclass(agora)
?strptime
library(swirl)
swirl()
bye()
x<-1:10
if(x>5) x<-0
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE && C(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 >
| 8 || 6 != 8 && 4 > 3.9
5 > | 8 || 6 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun")
paste("Programming","is","fun!")
submit()
telegram("vamos","ver","se","funciona")
submit()
mad_libs("algeria","hot","arab")
submit()
'I' %p% 'love' %p% 'you'
'I' %p% 'love' %p% 'R1'
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
weekdays(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
q()
x <- matrix(rnorm(200),20,10)
x
apply(x,2,mean)
apply(x,1,mean)
apply(x,1,sum)
x <- matrix(c(1:6),2,3)
x
apply(x,1,sum)
apply(x,3,sum)
apply(x,1,sum)
apply(x,2,sum)
str(rowSums)
a<- array(rnorm(2*2*10),c(2,2,10))
a
mapply(rep,1:4,4:1)
noise <- function(n,mean,sd) {rnorm(n,mean,sd)}
noise(5m1m2)
noise(5,1,2)
mapply(noise,1:5,1:5,2)
str(tapply)
?gl
?range
x <- 1:10
x
split(x,gl(5,2))
split(x,gl(5,3))
split(x,gl(5,2))
library(datasets)
head(airquality)
nrows(airquality)
nrow(airquality)
ncol(airquality)
s <- split(airquality,airquality$Month)
s
class(s)
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=T))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=T))
x <- rnorm(10)
x
f1 <- gl(2,5)
f1
f2 <- gl(5,2)
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
list(f1,f2)
split(x,list(f1,f2))
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2),drop=T))
invisivel <- function(x) x
invisivel(10)
invisivel <- function(x) invisible(x)
invisivel(10)
x <- invisivel(10)
x
printmessage <- function(x) {}
printmessage <- function(x) {
if(x>0) print("maior que zero")
else print("menor que zero")
invisible(x)
}
printmessage("pam")
x<-printmessage("pam")
x
log(-1)
mean(x1)
traceback()
lm(y~x)
traceback()
debug(lm(y~x))
debug(lm
)
lm(y~x)
library(swirl)
ls()
rm(list=ls())
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
flags$botright
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sun)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19>23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
OK
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
data(iris)
?iris
class(iris)
iris$Sepal.Length
mean(iris$Sepal.Length)
head(iris)
iris[$species=="viriginica"]
iris[$species=="virginica"]
iris[iris$species=="virginica"]
head(iris[iris$species=="virginica"]()
head(iris[iris$species=="virginica"]
head(iris[iris$species=="virginica"])
head(iris[,iris$species=="virginica"]
)
iris[iris$species=="virginica",]
iris[iris$species=="virginica"]
iris[[iris$species=="virginica"]]
iris[[iris$species=="virginica",]]
tapply(iris,iris$Species,mean)
iris[iris$Species=="virginica"]
iris[iris$Species=="virginica",]
virginica <- iris[iris$Species=="virginica",]
virginica$Sepal.Length
mean(virginica$Sepal.Length)
round(mean(virginica$Sepal.Length))
head(iris)
iris[,1:4]
head(iris[,1:4])
sapply(iris[,1:4],mean)
rowMeans(iris[,1:4])
colMeans(iris[,1:4])
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
head(iris[,1:4])
data("mtcars")
data(mtcars)
?mtcars
head(mtcars)
lapply(mtcars,mean)
head(mtcars)
split(mtcars,mtcars$cyl)
apply(mtcars,2,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
sapply(split(mtcars$mpg,mtcars$cyl),mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
mean(mtcars$mpg,mtcars$cyl)
sapply(mtcars,cyl,mean)
with(mtcars,tapply(hp,cyl,mean))
pam <- with(mtcars,tapply(hp,cyl,mean))
pam[,8]
pam[,3]
class(pam)
pam[1]
pam[3]
pam[3] - pam[1]
round(pam[3] - pam[1])
q()
makeVector <- function(x=numeric()) {}
makeVector <- function(x=numeric()) {
m <- NULL
set <- function(y) {}
set <- function(y) {}
}
setwd("D:/R/Coursera")
dir()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
str(mean)
args(mean)
str(cachemean)
?<<-
?`<<-`
makeVector(c(1,2,3,4))
c <- makeVector(c(1,2,3,4))
c
environment(c$getmean())
ls(environment(c$getmean()))
ls(getenv(c$getmean()))
c
environment(<environment: 0x0000000014d4bd58>)
environment("<environment: 0x0000000014d4bd58>")
mean(c)
mean(c$get())
c$get()
c$getmean()
cachemean(c)
cachemean(c)
cachemean(c)
cachemean(c)
c$set(1:10)
cachemean(c)
cachemean(c)
setwd("D:/R/Coursera/ProgrammingAssignment2")
dir()
?solve
